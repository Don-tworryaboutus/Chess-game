import json # Json file generated by ChatGPT
import pygame # Import pygame to create a GUI

with open("pieces.json") as f:
    pieces = json.load(f) # Set pieces settings

screen_width = 1000 # Set the width (and the height) of the window
square_size = screen_width // 8 # Set the width and the height of the squares
light_square_color = "#d5c9bb" # Light Squares color
dark_square_color = "#b2a696" # Dark Squares color

screen = pygame.display.set_mode((screen_width, screen_width)) # Apply the height to the window

running = True # Main loop variable
dragging_piece = None

pieces_positions = {} # Create a dictionary with every piece position
pieces_images = {} # Create a dictionary with every piece image

# Get precises pieces settings
for piece in pieces["pieces"]:
    piece_id = piece["id"] # Get piece id 
    pieces_positions[piece_id] = piece["position"] # Get piece position ans add it into the pieces_position dictionary
    piece_image = pygame.image.load(piece["image"]) # Get the image path
    pieces_images[piece_id] = pygame.transform.scale(piece_image, (square_size, square_size)) # Transform image to the right size and add it into pieces_image dictionary

# Draw a chess grid by coloring every other square. 
def draw_chessboard():
    for row in range(8):
        for col in range(8):
            # Determines the color of the square if the square "cordonate" is odd or even
            color = pygame.Color(light_square_color) if (row + col) % 2 == 0 else pygame.Color(dark_square_color)
            # Draw the square
            pygame.draw.rect(screen, color, (col * square_size, row * square_size, square_size, square_size))

def draw_piece(piece_id, piece_x_position, piece_y_position):
    piece_image = pieces_images[piece_id] # Get precise image path
    grid_x_position = (piece_x_position * square_size) + (square_size - piece_image.get_width()) // 2 # Set x cordonate in the center of the square
    grid_y_position = (piece_y_position * square_size) + (square_size - piece_image.get_width()) // 2 # Set y cordonate in the center of the square
    screen.blit(piece_image, (grid_x_position, grid_y_position)) # Display the piece on the screen

    piece_rect = pygame.Rect(grid_x_position, grid_y_position, piece_image.get_width(), piece_image.get_height())
    return piece_rect

def handle_drag_and_drop():
    global dragging_piece
    
    if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1: # Detect if left mouse button is pressed
        mouse_x_cordonate, mouse_y_cordonate = pygame.mouse.get_pos() # Get x, y cordonates of the mouse
        for piece_id, (piece_x_position, piece_y_position) in pieces_positions.items(): # WARN !!!
            piece_rect = draw_piece(piece_id, piece_x_position, piece_y_position) # WARN !!!!
            if piece_rect.collidepoint(mouse_x_cordonate, mouse_y_cordonate): # Verify if the piece collide with the mouse 
                    dragging_piece = piece_id # Set the piece as beeing dragged
    
    if event.type == pygame.MOUSEBUTTONUP and event.button == 1:
        pass

while running:
    # Prevents from crashing
    for event in pygame.event.get(): 
        if event.type == pygame.QUIT:
            running = False

    # Draw the chessboard
    draw_chessboard()
    handle_drag_and_drop()

    print(dragging_piece)

    # Draw the pieces 
    for piece_id, (piece_x_position, piece_y_position) in pieces_positions.items(): 
        if piece_id == dragging_piece:
            mouse_x_cordonate, mouse_y_cordonate = pygame.mouse.get_pos() # Get x, y cordonates of the mouse
            position_x = mouse_x_cordonate - (square_size // 2)
            postiion_y = mouse_y_cordonate - (square_size // 2)
            screen.blit(piece_image[piece_id], (position_x, postiion_y))
        else :
            draw_piece(piece_id, piece_x_position, piece_y_position)

    # Display the window 
    pygame.display.flip()
